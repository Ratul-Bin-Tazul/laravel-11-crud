name: Run Tests

on:
  workflow_dispatch:
    inputs:
      test_run_id:
        description: 'Test Run ID'
        required: true
        type: string
      branch:
        description: 'Branch to test'
        required: true
        default: 'main'
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci || npm install
        continue-on-error: true

      - name: Run tests with coverage
        id: run_tests
        run: |
          # Try to run tests with coverage
          npm test -- --coverage || echo "Tests failed or not configured"
        continue-on-error: true

      - name: Check for coverage and test report files
        id: check_files
        run: |
          # Check if coverage.xml exists
          if [ -f "coverage/coverage-final.json" ]; then
            echo "coverage_exists=true" >> $GITHUB_OUTPUT
          else
            echo "coverage_exists=false" >> $GITHUB_OUTPUT
            echo "Creating dummy coverage file"
            mkdir -p coverage
            echo '{"total": {"lines":{"total":100,"covered":0,"skipped":0,"pct":0}}}' > coverage/coverage-final.json
          fi
          
          # Check if test-report.xml exists
          if [ -f "test-report.xml" ]; then
            echo "test_report_exists=true" >> $GITHUB_OUTPUT
          else
            echo "test_report_exists=false" >> $GITHUB_OUTPUT
            echo "Creating dummy test report"
            echo '<?xml version="1.0" encoding="UTF-8"?><testsuites tests="0" failures="0" skipped="0"></testsuites>' > test-report.xml
          fi

      - name: Debug - Show file contents
        run: |
          echo "Coverage file content:"
          cat coverage/coverage-final.json || echo "No coverage file found"
          echo "\nTest report content:"
          cat test-report.xml || echo "No test report file found"

      - name: Process test results
        id: process_results
        run: |
          # Default values
          COVERAGE_PCT=0
          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0
          SKIPPED_TESTS=0
          
          # Try to extract coverage percentage
          if [ -f "coverage/coverage-final.json" ]; then
            COVERAGE_PCT=$(cat coverage/coverage-final.json | grep -o '"pct":[0-9.]*' | head -1 | cut -d':' -f2 || echo 0)
          fi
          
          # Try to extract test counts
          if [ -f "test-report.xml" ]; then
            TOTAL_TESTS=$(grep -o 'tests="[0-9]*"' test-report.xml | head -1 | cut -d'"' -f2 || echo 0)
            FAILED_TESTS=$(grep -o 'failures="[0-9]*"' test-report.xml | head -1 | cut -d'"' -f2 || echo 0)
            SKIPPED_TESTS=$(grep -o 'skipped="[0-9]*"' test-report.xml | head -1 | cut -d'"' -f2 || echo 0)
            PASSED_TESTS=$((TOTAL_TESTS - FAILED_TESTS - SKIPPED_TESTS))
          fi
          
          # Ensure values are numbers
          COVERAGE_PCT=${COVERAGE_PCT:-0}
          TOTAL_TESTS=${TOTAL_TESTS:-0}
          PASSED_TESTS=${PASSED_TESTS:-0}
          FAILED_TESTS=${FAILED_TESTS:-0}
          SKIPPED_TESTS=${SKIPPED_TESTS:-0}
          
          # Set outputs
          echo "coverage_percentage=$COVERAGE_PCT" >> $GITHUB_OUTPUT
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "skipped_tests=$SKIPPED_TESTS" >> $GITHUB_OUTPUT

      - name: Send results to webhook
        run: |
          TEST_RUN_ID=${{ github.event.inputs.test_run_id }}
          COMPLETED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Determine status based on test results
          if [ "${{ steps.process_results.outputs.failed_tests }}" -gt 0 ]; then
            STATUS="failed"
          else
            STATUS="passed"
          fi
          
          # Create JSON payload
          PAYLOAD=$(cat <<EOF
          {
            "status": "${STATUS}",
            "completed_at": "${COMPLETED_AT}",
            "results": {
              "coverage_percentage": ${{ steps.process_results.outputs.coverage_percentage }},
              "total_tests": ${{ steps.process_results.outputs.total_tests }},
              "passed_tests": ${{ steps.process_results.outputs.passed_tests }},
              "failed_tests": ${{ steps.process_results.outputs.failed_tests }},
              "skipped_tests": ${{ steps.process_results.outputs.skipped_tests }}
            }
          }
          EOF
          )
          
          echo "Sending payload: ${PAYLOAD}"
          
          # Send to webhook
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "${PAYLOAD}" \
            "https://testaurora-main-gvfeei.laravel.cloud/api/test-runs/${TEST_RUN_ID}/update"
