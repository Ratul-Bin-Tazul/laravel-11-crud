name: Run Tests

on:
  workflow_dispatch:
    inputs:
      test_run_id:
        description: 'Test Run ID'
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, xml
        coverage: xdebug
        
    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
        
    - name: Install Dependencies
      run: composer install --prefer-dist --no-interaction --no-progress
      
    - name: Prepare Laravel Application
      run: |
        cp .env.example .env
        php artisan key:generate
        
    - name: Run Tests with Coverage
      run: XDEBUG_MODE=coverage vendor/bin/phpunit --coverage-clover=coverage.xml
      
    - name: Generate Test Results JSON
      id: test-results
      run: |
        # Extract test counts and coverage from the PHPUnit output
        if [ -f coverage.xml ]; then
          COVERAGE=$(php -r '
            $xml = new SimpleXMLElement(file_get_contents("coverage.xml"));
            $metrics = $xml->xpath("//metrics")[0];
            $statements = (int)$metrics["statements"];
            $coveredstatements = (int)$metrics["coveredstatements"];
            echo ($statements > 0) ? round(($coveredstatements / $statements) * 100, 2) : 0;
          ')
          
          # Get test counts
          TEST_RESULTS=$(php -r '
            $xml = simplexml_load_file("./build/logs/junit.xml", "SimpleXMLElement", LIBXML_NOERROR);
            if ($xml === false) {
              echo json_encode([
                "total_tests" => 0,
                "passed_tests" => 0,
                "failed_tests" => 0,
                "skipped_tests" => 0
              ]);
              exit;
            }
            $testsuite = $xml->testsuite;
            $total = (int)$testsuite["tests"];
            $failures = (int)$testsuite["failures"];
            $errors = (int)$testsuite["errors"];
            $skipped = (int)$testsuite["skipped"];
            $passed = $total - $failures - $errors - $skipped;
            echo json_encode([
              "total_tests" => $total,
              "passed_tests" => $passed,
              "failed_tests" => $failures + $errors,
              "skipped_tests" => $skipped
            ]);
          ')
          
          # Create results JSON
          RESULTS_JSON=$(echo $TEST_RESULTS | jq --arg coverage "$COVERAGE" \
            '{coverage_percentage: ($coverage|tonumber), total_tests: .total_tests, passed_tests: .passed_tests, failed_tests: .failed_tests, skipped_tests: .skipped_tests}')
          
          echo "results=$RESULTS_JSON" >> $GITHUB_OUTPUT
        else
          echo "results={\"coverage_percentage\": 0, \"total_tests\": 0, \"passed_tests\": 0, \"failed_tests\": 0, \"skipped_tests\": 0}" >> $GITHUB_OUTPUT
        fi
      
    - name: Call Webhook
      run: |
        COMPLETED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        STATUS="${{ job.status }}"
        
        curl -X POST https://githubworkflow.requestcatcher.com/ \
          -H "Content-Type: application/json" \
          -d "{
            \"test_run_id\": \"${{ inputs.test_run_id }}\",
            \"status\": \"$STATUS\",
            \"completed_at\": \"$COMPLETED_AT\",
            \"results\": ${{ steps.test-results.outputs.results }}
          }"
      if: always()
