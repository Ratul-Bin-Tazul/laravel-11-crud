name: Test Results

on:
  workflow_dispatch:
    inputs:
      test_run_id:
        description: 'Test Run ID'
        required: true
        type: string
      branch:
        description: 'Branch to test'
        required: true
        default: 'main'
        type: string


jobs:
  generate-test-results:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '11'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xmlstarlet

      - name: Run tests and generate coverage
        run: |
          # Command to run your tests (adjust it as per your setup)
          ./gradlew test jacocoTestReport

      - name: Generate Test Results JSON
        id: test-results
        run: |
          # Ensure coverage.xml exists
          if [ ! -f coverage.xml ]; then
            echo "Warning: coverage.xml not found. Using 0% coverage."
            echo "lines: 0.0%" > coverage.xml
          fi

          # Ensure test-report.xml exists
          if [ ! -f test-report.xml ]; then
            echo "Warning: test-report.xml not found. Using 0 tests."
            echo '<?xml version="1.0"?><testsuites tests="0" failures="0" skipped="0"></testsuites>' > test-report.xml
          fi

          # Extract coverage percentage safely
          COVERAGE=$(grep -o 'lines:\s*[0-9.]*%' coverage.xml | grep -o '[0-9.]*' || echo "0.0")

          # Parse test results safely
          TOTAL_TESTS=$(grep -o 'tests="[0-9]*"' test-report.xml | head -1 | grep -o '[0-9]*' || echo "0")
          FAILURES=$(grep -o 'failures="[0-9]*"' test-report.xml | head -1 | grep -o '[0-9]*' || echo "0")
          SKIPPED=$(grep -o 'skipped="[0-9]*"' test-report.xml | head -1 | grep -o '[0-9]*' || echo "0")
          PASSED=$((TOTAL_TESTS - FAILURES - SKIPPED))

          # Create a coverage breakdown by file
          COVERAGE_BY_FILE=$(xmlstarlet fo coverage.xml | xmlstarlet sel -t -m "//file" -v "@name" -o ": " -v "sum(./metrics/coveredstatements) div sum(./metrics/statements) * 100" -n || echo "No coverage data available")

          echo "Extracted values:"
          echo "Coverage: $COVERAGE%"
          echo "Total Tests: $TOTAL_TESTS"
          echo "Passed: $PASSED"
          echo "Failed: $FAILURES"
          echo "Skipped: $SKIPPED"
          echo "Coverage by file: $COVERAGE_BY_FILE"

          # Create results JSON
          cat > test-results.json << EOF
          {
            "status": "completed",
            "coverage": "$COVERAGE_BY_FILE",
            "completed_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "results": {
              "coverage_percentage": $COVERAGE,
              "total_tests": $TOTAL_TESTS,
              "passed_tests": $PASSED,
              "failed_tests": $FAILURES,
              "skipped_tests": $SKIPPED
            }
          }
          EOF

          cat test-results.json

      - name: Upload results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.json
